import 'dart:math';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:timezone/timezone.dart' as tz;
import '../service/difficult_words_service.dart';

class SmartNotificationService {
  static final SmartNotificationService _instance = SmartNotificationService._internal();
  factory SmartNotificationService() => _instance;
  SmartNotificationService._internal();

  final FlutterLocalNotificationsPlugin _notifications = FlutterLocalNotificationsPlugin();
  final DifficultWordsService _difficultWordsService = DifficultWordsService();

  // Smart notification IDs
  static const int smartQuizReminderId = 100;
  static const int afterLearningQuizId = 101;
  static const int forgettingWordsId = 102;
  static const int streakMotivationId = 103;
  static const int eveningReviewId = 104;

  /// Initialize the smart notification service
  Future<void> initialize() async {
    // Schedule daily evening review check
    await _scheduleEveningReviewCheck();
    print('ü§ñ Smart Notification Service initialized');
  }

  /// Trigger after user completes a learning session (5-10 words)
  Future<void> triggerAfterLearningSession(int wordsLearned, String topic) async {
    final prefs = await SharedPreferences.getInstance();
    final lastPrompt = prefs.getString('last_after_learning_prompt');
    final now = DateTime.now();
    
    // Only prompt once every 4 hours to avoid spam
    if (lastPrompt != null) {
      final lastPromptTime = DateTime.parse(lastPrompt);
      if (now.difference(lastPromptTime).inHours < 4) {
        print('üîï After-learning notification skipped - in 4-hour cooldown');
        return;
      }
    }

    // Only trigger if learned 5+ words
    if (wordsLearned >= 5) {
      await _showAfterLearningNotification(wordsLearned, topic);
      await prefs.setString('last_after_learning_prompt', now.toIso8601String());
      print('‚úÖ After-learning notification shown for $wordsLearned words on topic: $topic');
    } else {
      print('üîï After-learning notification skipped - only $wordsLearned words learned (need 5+)');
    }
  }

  /// Check for words that are about to be forgotten
  Future<void> checkForgettingWords() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final today = DateTime.now();
      final todayString = '${today.year}-${today.month}-${today.day}';
      
      // Check if forgetting words notification was already shown today
      final lastForgettingNotificationDate = prefs.getString('last_forgetting_notification_date');
      if (lastForgettingNotificationDate == todayString) {
        print('üîï Forgetting words notification skipped - already shown today');
        return;
      }
      
      final difficultWords = await _difficultWordsService.getWordsNeedingReview(threshold: 0.4);
      
      if (difficultWords.length >= 3) {
        await _showForgettingWordsNotification(difficultWords.take(3).toList());
        // Mark that we've shown forgetting words notification today
        await prefs.setString('last_forgetting_notification_date', todayString);
        print('‚úÖ Forgetting words notification shown and tracked for $todayString');
      } else {
        print('üîï Forgetting words notification skipped - only ${difficultWords.length} words need review (need 3+)');
      }
    } catch (e) {
      print('‚ùå Error checking forgetting words: $e');
    }
  }

  /// Trigger streak motivation notification
  Future<void> triggerStreakMotivation() async {
    final prefs = await SharedPreferences.getInstance();
    final streakDays = prefs.getInt('streak_days') ?? 0;
    final lastQuizDate = prefs.getString('last_quiz_date');
    final today = DateTime.now();
    final todayString = '${today.year}-${today.month}-${today.day}';
    
    // Check if streak notification was already shown today
    final lastStreakNotificationDate = prefs.getString('last_streak_notification_date');
    if (lastStreakNotificationDate == todayString) {
      print('üîï Streak motivation skipped - already shown today');
      return;
    }

    // Check if user hasn't done quiz today and has a streak
    if (streakDays > 0 && (lastQuizDate == null || lastQuizDate != todayString)) {
      await _showStreakMotivationNotification(streakDays);
      // Mark that we've shown streak notification today
      await prefs.setString('last_streak_notification_date', todayString);
      print('‚úÖ Streak motivation notification shown and tracked for $todayString');
    } else {
      print('üîï Streak motivation skipped - no streak or quiz already done today');
    }
  }

  /// Schedule evening review check (8 PM daily)
  Future<void> _scheduleEveningReviewCheck() async {
    await _notifications.zonedSchedule(
      eveningReviewId,
      '', // Will be set dynamically
      '',
      _nextInstanceOf(20, 0), // 8 PM
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'evening_review',
          '√în t·∫≠p bu·ªïi t·ªëi',
          channelDescription: 'Nh·∫Øc nh·ªü √¥n t·∫≠p bu·ªïi t·ªëi',
          importance: Importance.defaultImportance,
          priority: Priority.defaultPriority,
        ),
      ),
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.absoluteTime,
      matchDateTimeComponents: DateTimeComponents.time,
    );
  }

  /// Show notification after learning session
  Future<void> _showAfterLearningNotification(int wordsLearned, String topic) async {
    final notifications = _generateAfterLearningNotifications(wordsLearned, topic);
    final notification = notifications[Random().nextInt(notifications.length)];

    await _notifications.show(
      afterLearningQuizId,
      notification['title']!,
      notification['body']!,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'after_learning_quiz',
          'Quiz sau khi h·ªçc',
          channelDescription: 'G·ª£i √Ω quiz sau khi h·ªçc t·ª´ m·ªõi',
          importance: Importance.defaultImportance,
          priority: Priority.defaultPriority,
        ),
      ),
      payload: 'after_learning_quiz',
    );
  }

  /// Show notification for words about to be forgotten
  Future<void> _showForgettingWordsNotification(List<DifficultWordData> words) async {
    final word = words.first;
    final notifications = _generateForgettingWordsNotifications(word);
    final notification = notifications[Random().nextInt(notifications.length)];

    await _notifications.show(
      forgettingWordsId,
      notification['title']!,
      notification['body']!,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'forgetting_words',
          'T·ª´ s·∫Øp qu√™n',
          channelDescription: 'Nh·∫Øc nh·ªü t·ª´ s·∫Øp b·ªã qu√™n',
          importance: Importance.high,
          priority: Priority.high,
        ),
      ),
      payload: 'forgetting_words:${word.word}',
    );
  }

  /// Show streak motivation notification
  Future<void> _showStreakMotivationNotification(int streakDays) async {
    final notifications = _generateStreakMotivationNotifications(streakDays);
    final notification = notifications[Random().nextInt(notifications.length)];

    await _notifications.show(
      streakMotivationId,
      notification['title']!,
      notification['body']!,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'streak_motivation',
          'ƒê·ªông l·ª±c streak',
          channelDescription: 'Kh√≠ch l·ªá duy tr√¨ chu·ªói h·ªçc t·∫≠p',
          importance: Importance.defaultImportance,
          priority: Priority.defaultPriority,
        ),
      ),
      payload: 'streak_motivation',
    );
  }

  /// Generate personalized after-learning notifications with better UX
  List<Map<String, String>> _generateAfterLearningNotifications(int wordsLearned, String topic) {
    final baseNotifications = [
      {
        'title': 'üéâ Tuy·ªát v·ªùi! V·ª´a ho√†n th√†nh b√†i h·ªçc',
        'body': 'B·∫°n ƒë√£ h·ªçc $wordsLearned t·ª´ v·ªÅ "$topic". Th·ª≠ l√†m quiz nhanh ƒë·ªÉ ghi nh·ªõ l√¢u h∆°n nh√©!'
      },
      {
        'title': '‚ú® Ti·∫øn b·ªô ƒë√°ng k·ªÉ r·ªìi ƒë·∫•y!',
        'body': '$wordsLearned t·ª´ m·ªõi ƒë√£ v√†o n√£o ‚Äî quiz 2 ph√∫t ƒë·ªÉ "kh√≥a" ki·∫øn th·ª©c n√†y?'
      },
      {
        'title': 'üß† N√£o ƒëang "n√≥ng" ƒë√¢y!',
        'body': 'ƒê√¢y l√† l√∫c tuy·ªát v·ªùi nh·∫•t ƒë·ªÉ √¥n l·∫°i $wordsLearned t·ª´ v·ª´a h·ªçc. C√πng quiz nh√©!'
      },
      {
        'title': 'üéØ G·∫ßn xong r·ªìi!',
        'body': 'Ch·ªâ c·∫ßn quiz nhanh $wordsLearned t·ª´ "$topic" l√† ho√†n thi·ªán b√†i h·ªçc!'
      },
      {
        'title': 'üåü H·ªçc gi·ªèi qu√°!',
        'body': '$wordsLearned t·ª´ v·ª±ng "$topic" ƒë√£ s·∫µn s√†ng. Quiz ƒë·ªÉ ch·∫Øc ch·∫Øn nh·ªõ l√¢u nh√©!'
      }
    ];

    // Add time-sensitive messages based on learning session size
    if (wordsLearned >= 10) {
      baseNotifications.add({
        'title': 'üèÜ Wow! H·ªçc nhi·ªÅu th·∫ø!',
        'body': '$wordsLearned t·ª´ trong m·ªôt l·∫ßn ‚Äî b·∫°n th·∫≠t ki√™n tr√¨! Quiz ƒë·ªÉ kh√¥ng qu√™n nh√©!'
      });
    } else if (wordsLearned >= 5) {
      baseNotifications.add({
        'title': 'üëè Ti·∫øn ƒë·ªô ·ªïn ƒë·ªãnh!',
        'body': '$wordsLearned t·ª´ v·ªÅ "$topic" ‚Äî momentum t·ªët ƒë·∫•y! Th·ª≠ quiz lu√¥n?'
      });
    }

    // Add more variety for different moods and tones
    baseNotifications.addAll([
      {
        'title': 'üöÄ B·∫°n ƒëang tƒÉng t·ªëc!',
        'body': 'V·ªõi $wordsLearned t·ª´ m·ªõi, n√£o b·ªô ƒëang ho·∫°t ƒë·ªông h·∫øt c√¥ng su·∫•t ‚Äî gi·ªØ ƒë√† b·∫±ng quiz nh√©!'
      },
      {
        'title': 'üìö Ki·∫øn th·ª©c m·ªõi ƒë√£ c·∫≠p b·∫øn!',
        'body': 'Ch·ªß ƒë·ªÅ "$topic" v·ª´a ƒë∆∞·ª£c c·∫≠p nh·∫≠t $wordsLearned t·ª´. √în nhanh k·∫ªo tr√¥i!'
      },
      {
        'title': 'üß† B·ªô nh·ªõ c·∫ßn "save"!',
        'body': '$wordsLearned t·ª´ m·ªõi ƒëang ·ªü RAM ‚Äî chuy·ªÉn sang ROM b·∫±ng quiz 2 ph√∫t n√†o!'
      },
      {
        'title': 'üéØ ƒê√°nh d·∫•u th√†nh c√¥ng!',
        'body': 'Ho√†n th√†nh $wordsLearned t·ª´ ‚Äî ch·ªâ c√≤n quiz ƒë·ªÉ "ch·ªët s·ªï" ki·∫øn th·ª©c h√¥m nay!'
      },
      {
        'title': 'üí´ B·∫°n h·ªçc nhanh th·∫≠t!',
        'body': 'Ch·ªâ v√†i ph√∫t ƒë√£ xong $wordsLearned t·ª´. Th·ª≠ th√°ch tr√≠ nh·ªõ v·ªõi quiz ngay nh√©!'
      },
      {
        'title': 'üìà Bi·ªÉu ƒë·ªì ti·∫øn b·ªô ƒëang l√™n!',
        'body': 'Th√™m $wordsLearned t·ª´ v√†o kho b√°u ‚Äî quiz ƒë·ªÉ ƒë·∫£m b·∫£o ch√∫ng kh√¥ng "ƒë√†o t·∫©u"!'
      },
      {
        'title': 'üß© Gh√©p n·ªëi ki·∫øn th·ª©c!',
        'body': 'B·∫°n v·ª´a gh√©p $wordsLearned m·∫£nh gh√©p t·ª´ v·ª±ng. Ho√†n thi·ªán b·ª©c tranh v·ªõi quiz nh√©!'
      },
      {
        'title': '‚ö°Ô∏è Momentum ƒëang c·ª±c t·ªët!',
        'body': 'ƒê·ª´ng d·ª´ng l·∫°i! Quiz nhanh $wordsLearned t·ª´ ƒë·ªÉ gi·ªØ nh·ªãp h·ªçc t·∫≠p tuy·ªát v·ªùi n√†y.'
      },
    ]);

    return baseNotifications;
  }

  /// Generate forgetting words notifications with positive framing
  List<Map<String, String>> _generateForgettingWordsNotifications(DifficultWordData word) {
    return [
      {
        'title': 'üí° Th·ªùi gian "refresh" t·ª´ v·ª±ng!',
        'body': 'T·ª´ "${word.word}" c·∫ßn ƒë∆∞·ª£c √¥n l·∫°i. 1 ph√∫t th√¥i ƒë·ªÉ ghi nh·ªõ l√¢u h∆°n!'
      },
      {
        'title': 'üîÑ C·ªßng c·ªë ki·∫øn th·ª©c!',
        'body': '"${word.word}" ƒëang ch·ªù ƒë∆∞·ª£c "l√†m m·ªõi" trong tr√≠ nh·ªõ. Quiz nhanh nh√©!'
      },
      {
        'title': 'üß† Duy tr√¨ ƒë·ªô s·∫Øc b√©n!',
        'body': '√în l·∫°i "${word.word}" ƒë·ªÉ n√£o lu√¥n "t∆∞∆°i t·ªânh" v·ªõi t·ª´ n√†y!'
      },
      {
        'title': 'üéØ Th·ª≠ th√°ch nh·ªè!',
        'body': 'B·∫°n c√≤n nh·ªõ "${word.word}" kh√¥ng? Th·ª≠ s·ª©c v·ªõi t·ª´ n√†y nh√©!'
      },
      {
        'title': '‚≠ê Gi·ªØ v·ªØng ki·∫øn th·ª©c!',
        'body': '"${word.word}" c·∫ßn m·ªôt l·∫ßn √¥n t·∫≠p n·ªØa ƒë·ªÉ kh·∫Øc s√¢u trong t√¢m tr√≠!'
      },
      // NEW ONES
      {
        'title': 'üÜò C·ª©u nguy t·ª´ v·ª±ng!',
        'body': '"${word.word}" s·∫Øp "tr√¥i" kh·ªèi tr√≠ nh·ªõ ‚Äî 30 gi√¢y ƒë·ªÉ k√©o n√≥ tr·ªü l·∫°i!'
      },
      {
        'title': 'üß© C√≤n nh·ªõ "${word.word}" kh√¥ng?',
        'body': 'N√£o ƒëang h·ªèi b·∫°n ƒë·∫•y ‚Äî tr·∫£ l·ªùi b·∫±ng quiz ƒë·ªÉ ch·ª©ng minh b·∫°n v·∫´n nh·ªõ!'
      },
      {
        'title': '‚è≥ ƒê·∫øm ng∆∞·ª£c b·∫Øt ƒë·∫ßu!',
        'body': 'N·∫øu kh√¥ng √¥n "${word.word}" ngay, n√≥ s·∫Ω bi·∫øn m·∫•t ‚Äî th·ª≠ th√°ch nh·ªè n√†o!'
      },
      {
        'title': 'üß† N√£o ƒëang nh·∫Øc b·∫°n!',
        'body': '√îi, "${word.word}" ‚Äî h√¨nh nh∆∞ b·∫°n l√¢u r·ªìi ch∆∞a g·∫∑p n√≥? C√πng √¥n l·∫°i nh√©!'
      },
      {
        'title': 'üíé ƒê√°nh b√≥ng vi√™n ng·ªçc!',
        'body': '"${word.word}" l√† vi√™n ng·ªçc qu√Ω ‚Äî ƒë·ª´ng ƒë·ªÉ n√≥ x·ªân m√†u, √¥n l·∫°i ngay!'
      },
      {
        'title': 'üîÅ L·∫∑p l·∫°i l√† m·∫π th√†nh c√¥ng!',
        'body': 'L·∫ßn √¥n th·ª© N cho "${word.word}" ‚Äî nh∆∞ng l·∫ßn n√†y s·∫Ω d·ªÖ h∆°n nhi·ªÅu!'
      },
      {
        'title': '‚ù§Ô∏è‚Äçü©π Ch·ªØa l√†nh kho·∫£ng tr·ªëng!',
        'body': 'Ki·∫øn th·ª©c ƒëang c√≥ l·ªó h·ªïng ·ªü t·ª´ "${word.word}" ‚Äî v√° n√≥ b·∫±ng quiz 1 ph√∫t!'
      },
    ];
  }

  /// Generate streak motivation notifications
  List<Map<String, String>> _generateStreakMotivationNotifications(int streakDays) {
    if (streakDays >= 7) {
      return [
        {
          'title': 'üî• Gi·ªØ l·ª≠a chu·ªói $streakDays ng√†y!',
          'body': 'L√†m 1 quiz nhanh ƒë·ªÉ gi·ªØ chu·ªói ‚Äî b·∫°n s·∫Øp ƒë·∫°t m·ªëc m·ªõi ƒë·∫•y!'
        },
        {
          'title': 'üèÜ Chu·ªói $streakDays ng√†y tuy·ªát v·ªùi!',
          'body': 'ƒê·ª´ng ƒë·ªÉ n√≥ ƒë·ª©t ·ªü ƒë√¢y ‚Äî ch·ªâ c·∫ßn 3 ph√∫t quiz ƒë·ªÉ ti·∫øp t·ª•c!'
        },
        {
          'title': '‚≠ê $streakDays ng√†y ki√™n tr√¨!',
          'body': 'B·∫°n ƒë√£ l√†m ƒë∆∞·ª£c ƒëi·ªÅu tuy·ªát v·ªùi ‚Äî h√£y duy tr√¨ ƒë√† n√†y!'
        },
        // NEW ONES
        {
          'title': 'üèÖ Huy ch∆∞∆°ng $streakDays ng√†y!',
          'body': 'B·∫°n x·ª©ng ƒë√°ng ƒë∆∞·ª£c vinh danh ‚Äî ƒë·ª´ng ƒë·ªÉ ng√†y h√¥m nay l√†m gi√°n ƒëo·∫°n chi·∫øn t√≠ch!'
        },
        {
          'title': 'üöÄ Bay cao c√πng chu·ªói $streakDays!',
          'body': 'M·ªói ng√†y l√† m·ªôt b∆∞·ªõc ti·∫øn ‚Äî h√¥m nay, h√£y th√™m m·ªôt b·∫≠c n·ªØa l√™n ƒë·ªânh cao!'
        },
        {
          'title': 'üíé Chu·ªói kim c∆∞∆°ng $streakDays ng√†y!',
          'body': 'ƒê·ª´ng ƒë·ªÉ m·ªôt ng√†y ngh·ªâ ph√° v·ª° vi√™n kim c∆∞∆°ng b·∫°n ƒë√£ m√†i gi≈©a b·∫•y l√¢u!'
        },
      ];
    } else {
      return [
        {
          'title': 'üå± Chu·ªói $streakDays ng√†y ƒëang l·ªõn!',
          'body': 'Quiz nhanh ƒë·ªÉ nu√¥i d∆∞·ª°ng th√≥i quen t·ªët n√†y nh√©!'
        },
        {
          'title': 'üí™ Ti·∫øp t·ª•c chu·ªói $streakDays ng√†y!',
          'body': 'M·ªói ng√†y m·ªôt ch√∫t ‚Äî b·∫°n ƒëang x√¢y d·ª±ng th√≥i quen tuy·ªát v·ªùi!'
        },
        // NEW ONES
        {
          'title': 'üìÖ $streakDays ng√†y ‚Äî th√≥i quen v√†ng!',
          'body': 'B·∫°n ƒëang x√¢y d·ª±ng th√≥i quen h·ªçc t·∫≠p tuy·ªát v·ªùi ‚Äî ƒë·ª´ng b·ªè l·ª° h√¥m nay!'
        },
        {
          'title': 'üïäÔ∏è Th·∫£ chim b·ªì c√¢u $streakDays ng√†y!',
          'body': 'M·ªói ng√†y l√† m·ªôt l√° th∆∞ g·ª≠i t·ªõi phi√™n b·∫£n t∆∞∆°ng lai ‚Äî h√£y g·ª≠i th√™m m·ªôt l√° n·ªØa!'
        },
        {
          'title': 'üå± Gieo h·∫°t $streakDays ng√†y r·ªìi!',
          'body': 'C√¢y tri th·ª©c ƒëang l·ªõn t·ª´ng ng√†y ‚Äî t∆∞·ªõi n∆∞·ªõc b·∫±ng quiz h√¥m nay nh√©!'
        },
      ];
    }
  }

  /// Get next instance of specific time
  tz.TZDateTime _nextInstanceOf(int hour, int minute) {
    final now = tz.TZDateTime.now(tz.local);
    var scheduledDate = tz.TZDateTime(tz.local, now.year, now.month, now.day, hour, minute);
    
    if (scheduledDate.isBefore(now)) {
      scheduledDate = scheduledDate.add(const Duration(days: 1));
    }
    
    return scheduledDate;
  }

  /// Evening review check - called by scheduled notification
  Future<void> performEveningReviewCheck() async {
    final prefs = await SharedPreferences.getInstance();
    final lastQuizDate = prefs.getString('last_quiz_date');
    final today = DateTime.now();
    final todayString = '${today.year}-${today.month}-${today.day}';
    
    // Check if evening review notification was already shown today
    final lastEveningNotificationDate = prefs.getString('last_evening_notification_date');
    if (lastEveningNotificationDate == todayString) {
      print('üîï Evening review notification skipped - already shown today');
      return;
    }

    // If no quiz today, send evening motivation
    if (lastQuizDate == null || lastQuizDate != todayString) {
      await _showEveningReviewNotification();
      // Mark that we've shown evening notification today
      await prefs.setString('last_evening_notification_date', todayString);
      print('‚úÖ Evening review notification shown and tracked for $todayString');
    } else {
      print('üîï Evening review notification skipped - quiz already done today');
    }
  }

  /// Show evening review notification with better timing
  Future<void> _showEveningReviewNotification() async {
    final prefs = await SharedPreferences.getInstance();
    final today = DateTime.now();
    final todayKey = '${today.year}-${today.month}-${today.day}';
    final todayWordsLearned = prefs.getInt('words_learned_$todayKey') ?? 0;
    
    // Only show if user learned something today
    if (todayWordsLearned == 0) {
      print('üåô Evening review skipped - no words learned today');
      return;
    }
    
    final notifications = [
      {
        'title': 'üåô Ng√†y h·ªçc t·∫≠p tuy·ªát v·ªùi!',
        'body': 'B·∫°n ƒë√£ h·ªçc $todayWordsLearned t·ª´ h√¥m nay. Quiz nhanh ƒë·ªÉ ng·ªß ngon h∆°n nh√©!'
      },
      {
        'title': '‚ú® Ho√†n thi·ªán ng√†y h·ªçc!',
        'body': '$todayWordsLearned t·ª´ m·ªõi trong ng√†y ‚Äî th·ª≠ quiz ƒë·ªÉ ki·ªÉm tra xem nh·ªõ ƒë∆∞·ª£c bao nhi√™u!'
      },
      {
        'title': 'üéØ ƒêi·ªÉm l·∫°i th√†nh qu·∫£!',
        'body': 'H√¥m nay ti·∫øn b·ªô $todayWordsLearned t·ª´. Quiz 3 ph√∫t ƒë·ªÉ "kh√≥a" ki·∫øn th·ª©c?'
      },
      {
        'title': 'üåü K·∫øt th√∫c ng√†y th√†nh c√¥ng!',
        'body': 'V·ªõi $todayWordsLearned t·ª´ m·ªõi, b·∫°n ƒë√£ l√†m r·∫•t t·ªët! Quiz ƒë·ªÉ ghi nh·ªõ l√¢u h∆°n?'
      },
      // NEW ONES
      {
        'title': 'üïØÔ∏è Th·∫Øp n·∫øn √¥n t·∫≠p!',
        'body': 'Bu·ªïi t·ªëi y√™n tƒ©nh l√† th·ªùi ƒëi·ªÉm ho√†n h·∫£o ƒë·ªÉ √¥n $todayWordsLearned t·ª´ ‚Äî th∆∞ gi√£n v√† ghi nh·ªõ s√¢u h∆°n.'
      },
      {
        'title': 'üìñ ƒê√≥ng s√°ch th·∫≠t ƒë·∫πp!',
        'body': 'K·∫øt th√∫c ng√†y v·ªõi $todayWordsLearned t·ª´ ‚Äî quiz nhanh ƒë·ªÉ "g√≥i qu√†" ki·∫øn th·ª©c mang theo v√†o gi·∫•c ng·ªß.'
      },
      {
        'title': 'üåå Tr∆∞·ªõc khi ch√¨m v√†o gi·∫•c m∆°...',
        'body': 'H√£y ƒëi·ªÉm l·∫°i $todayWordsLearned t·ª´ b·∫°n chinh ph·ª•c h√¥m nay ‚Äî n√£o s·∫Ω x·ª≠ l√Ω t·ªët h∆°n khi ng·ªß ƒë·∫•y!'
      },
      {
        'title': 'üõå √în tr∆∞·ªõc khi ng·ªß = nh·ªõ l√¢u h∆°n!',
        'body': 'Khoa h·ªçc ch·ª©ng minh: √¥n $todayWordsLearned t·ª´ tr∆∞·ªõc khi ng·ªß gi√∫p ghi nh·ªõ s√¢u ‚Äî th·ª≠ ngay nh√©!'
      },
      {
        'title': 'üå† K·∫øt ng√†y b·∫±ng √°nh sao tri th·ª©c!',
        'body': '$todayWordsLearned t·ª´ l·∫•p l√°nh h√¥m nay ‚Äî ƒëi·ªÉm l·∫°i ƒë·ªÉ ch√∫ng t·ªèa s√°ng trong t√¢m tr√≠ b·∫°n m√£i m√£i.'
      },
    ];

    final notification = notifications[Random().nextInt(notifications.length)];

    await _notifications.show(
      eveningReviewId,
      notification['title']!,
      notification['body']!,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'evening_review',
          '√în t·∫≠p bu·ªïi t·ªëi',
          channelDescription: 'Nh·∫Øc nh·ªü √¥n t·∫≠p bu·ªïi t·ªëi',
          importance: Importance.defaultImportance,
          priority: Priority.defaultPriority,
        ),
      ),
      payload: 'evening_review',
    );
  }

  /// Cancel all smart notifications
  Future<void> cancelAllSmartNotifications() async {
    await _notifications.cancel(smartQuizReminderId);
    await _notifications.cancel(afterLearningQuizId);
    await _notifications.cancel(forgettingWordsId);
    await _notifications.cancel(streakMotivationId);
    await _notifications.cancel(eveningReviewId);
  }
  
  /// Reset notification tracking for a new day (called when quiz is completed)
  Future<void> markQuizCompleted() async {
    final prefs = await SharedPreferences.getInstance();
    final today = DateTime.now();
    final todayString = '${today.year}-${today.month}-${today.day}';
    
    // Clear all daily notification flags since user completed quiz
    await prefs.remove('last_streak_notification_date');
    await prefs.remove('last_evening_notification_date');
    
    print('üéØ Quiz completed - cleared daily notification tracking for $todayString');
  }
  
  /// Clear all notification tracking data (for debugging or reset)
  Future<void> clearAllNotificationTracking() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('last_streak_notification_date');
    await prefs.remove('last_forgetting_notification_date');
    await prefs.remove('last_evening_notification_date');
    await prefs.remove('last_after_learning_prompt');
    
    print('üßπ All notification tracking data cleared');
  }
}