import 'dart:math';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:timezone/timezone.dart' as tz;
import '../repository/quiz_repository.dart';
import '../repository/user_progress_repository.dart';
import '../service/difficult_words_service.dart';

class SmartNotificationService {
  static final SmartNotificationService _instance = SmartNotificationService._internal();
  factory SmartNotificationService() => _instance;
  SmartNotificationService._internal();

  final FlutterLocalNotificationsPlugin _notifications = FlutterLocalNotificationsPlugin();
  final DifficultWordsService _difficultWordsService = DifficultWordsService();

  // Smart notification IDs
  static const int smartQuizReminderId = 100;
  static const int afterLearningQuizId = 101;
  static const int forgettingWordsId = 102;
  static const int streakMotivationId = 103;
  static const int eveningReviewId = 104;

  /// Initialize the smart notification service
  Future<void> initialize() async {
    // Schedule daily evening review check
    await _scheduleEveningReviewCheck();
  }

  /// Trigger after user completes a learning session (5-10 words)
  Future<void> triggerAfterLearningSession(int wordsLearned, String topic) async {
    final prefs = await SharedPreferences.getInstance();
    final lastPrompt = prefs.getString('last_after_learning_prompt');
    final now = DateTime.now();
    
    // Only prompt once every 4 hours to avoid spam
    if (lastPrompt != null) {
      final lastPromptTime = DateTime.parse(lastPrompt);
      if (now.difference(lastPromptTime).inHours < 4) return;
    }

    // Only trigger if learned 5+ words
    if (wordsLearned >= 5) {
      await _showAfterLearningNotification(wordsLearned, topic);
      await prefs.setString('last_after_learning_prompt', now.toIso8601String());
    }
  }

  /// Check for words that are about to be forgotten
  Future<void> checkForgettingWords() async {
    try {
      final difficultWords = await _difficultWordsService.getWordsNeedingReview(threshold: 0.4);
      
      if (difficultWords.length >= 3) {
        await _showForgettingWordsNotification(difficultWords.take(3).toList());
      }
    } catch (e) {
      print('Error checking forgetting words: $e');
    }
  }

  /// Trigger streak motivation notification
  Future<void> triggerStreakMotivation() async {
    final prefs = await SharedPreferences.getInstance();
    final streakDays = prefs.getInt('streak_days') ?? 0;
    final lastQuizDate = prefs.getString('last_quiz_date');
    final today = DateTime.now();
    final todayString = '${today.year}-${today.month}-${today.day}';

    // Check if user hasn't done quiz today and has a streak
    if (streakDays > 0 && (lastQuizDate == null || lastQuizDate != todayString)) {
      await _showStreakMotivationNotification(streakDays);
    }
  }

  /// Schedule evening review check (8 PM daily)
  Future<void> _scheduleEveningReviewCheck() async {
    await _notifications.zonedSchedule(
      eveningReviewId,
      '', // Will be set dynamically
      '',
      _nextInstanceOf(20, 0), // 8 PM
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'evening_review',
          '√în t·∫≠p bu·ªïi t·ªëi',
          channelDescription: 'Nh·∫Øc nh·ªü √¥n t·∫≠p bu·ªïi t·ªëi',
          importance: Importance.defaultImportance,
          priority: Priority.defaultPriority,
        ),
      ),
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.absoluteTime,
      matchDateTimeComponents: DateTimeComponents.time,
    );
  }

  /// Show notification after learning session
  Future<void> _showAfterLearningNotification(int wordsLearned, String topic) async {
    final notifications = _generateAfterLearningNotifications(wordsLearned, topic);
    final notification = notifications[Random().nextInt(notifications.length)];

    await _notifications.show(
      afterLearningQuizId,
      notification['title']!,
      notification['body']!,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'after_learning_quiz',
          'Quiz sau khi h·ªçc',
          channelDescription: 'G·ª£i √Ω quiz sau khi h·ªçc t·ª´ m·ªõi',
          importance: Importance.defaultImportance,
          priority: Priority.defaultPriority,
        ),
      ),
      payload: 'after_learning_quiz',
    );
  }

  /// Show notification for words about to be forgotten
  Future<void> _showForgettingWordsNotification(List<DifficultWordData> words) async {
    final word = words.first;
    final notifications = _generateForgettingWordsNotifications(word);
    final notification = notifications[Random().nextInt(notifications.length)];

    await _notifications.show(
      forgettingWordsId,
      notification['title']!,
      notification['body']!,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'forgetting_words',
          'T·ª´ s·∫Øp qu√™n',
          channelDescription: 'Nh·∫Øc nh·ªü t·ª´ s·∫Øp b·ªã qu√™n',
          importance: Importance.high,
          priority: Priority.high,
        ),
      ),
      payload: 'forgetting_words:${word.word}',
    );
  }

  /// Show streak motivation notification
  Future<void> _showStreakMotivationNotification(int streakDays) async {
    final notifications = _generateStreakMotivationNotifications(streakDays);
    final notification = notifications[Random().nextInt(notifications.length)];

    await _notifications.show(
      streakMotivationId,
      notification['title']!,
      notification['body']!,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'streak_motivation',
          'ƒê·ªông l·ª±c streak',
          channelDescription: 'Kh√≠ch l·ªá duy tr√¨ chu·ªói h·ªçc t·∫≠p',
          importance: Importance.defaultImportance,
          priority: Priority.defaultPriority,
        ),
      ),
      payload: 'streak_motivation',
    );
  }

  /// Generate personalized after-learning notifications
  List<Map<String, String>> _generateAfterLearningNotifications(int wordsLearned, String topic) {
    return [
      {
        'title': 'üß† √în nhanh ƒë·ªÉ ghi nh·ªõ s√¢u!',
        'body': 'B·∫°n v·ª´a h·ªçc $wordsLearned t·ª´ m·ªõi ‚Äî th·ª≠ √¥n l·∫°i ngay ƒë·ªÉ n√£o ghi nh·ªõ l√¢u h∆°n nh√©!'
      },
      {
        'title': '‚ú® C·ªßng c·ªë ki·∫øn th·ª©c ngay!',
        'body': '$wordsLearned t·ª´ "$topic" ƒëang ch·ªù ƒë∆∞·ª£c √¥n t·∫≠p ‚Äî ch·ªâ 2 ph√∫t th√¥i!'
      },
      {
        'title': 'üéØ Ho√†n thi·ªán b√†i h·ªçc!',
        'body': 'Quiz nhanh $wordsLearned t·ª´ v·ª´a h·ªçc ƒë·ªÉ kh√≥a ch·∫Øc ki·∫øn th·ª©c trong tr√≠ nh·ªõ!'
      },
      {
        'title': 'üí° Th·ªùi ƒëi·ªÉm v√†ng ƒë·ªÉ √¥n t·∫≠p!',
        'body': 'N√£o b·∫°n ƒëang ·ªü tr·∫°ng th√°i t·ªët nh·∫•t ƒë·ªÉ ghi nh·ªõ ‚Äî √¥n l·∫°i $wordsLearned t·ª´ n√†o!'
      }
    ];
  }

  /// Generate forgetting words notifications
  List<Map<String, String>> _generateForgettingWordsNotifications(DifficultWordData word) {
    return [
      {
        'title': '‚è≥ ƒê·ª´ng ƒë·ªÉ t·ª´ n√†y bi·∫øn m·∫•t!',
        'body': '"${word.word}" s·∫Øp b·ªã qu√™n r·ªìi ‚Äî √¥n l·∫°i trong 60 gi√¢y?'
      },
      {
        'title': 'üîÑ T·ª´ quen ƒëang "m·ªù d·∫ßn"!',
        'body': 'B·∫°n c√≤n nh·ªõ "${word.word}" nghƒ©a l√† g√¨ kh√¥ng? √în ngay nh√©!'
      },
      {
        'title': 'üí≠ C·ª©u l·∫•y t·ª´ v·ª±ng!',
        'body': '"${word.word}" ƒëang c·∫ßn ƒë∆∞·ª£c "s·∫°c l·∫°i" trong tr√≠ nh·ªõ ‚Äî gi√∫p n√≥ nh√©!'
      },
      {
        'title': 'üéØ Th·ª≠ th√°ch tr√≠ nh·ªõ!',
        'body': 'Th·ª≠ xem b·∫°n c√≤n nh·ªõ "${word.word}" kh√¥ng ‚Äî ch·ªâ 30 gi√¢y th√¥i!'
      }
    ];
  }

  /// Generate streak motivation notifications
  List<Map<String, String>> _generateStreakMotivationNotifications(int streakDays) {
    if (streakDays >= 7) {
      return [
        {
          'title': 'üî• Gi·ªØ l·ª≠a chu·ªói $streakDays ng√†y!',
          'body': 'L√†m 1 quiz nhanh ƒë·ªÉ gi·ªØ chu·ªói ‚Äî b·∫°n s·∫Øp ƒë·∫°t m·ªëc m·ªõi ƒë·∫•y!'
        },
        {
          'title': 'üèÜ Chu·ªói $streakDays ng√†y tuy·ªát v·ªùi!',
          'body': 'ƒê·ª´ng ƒë·ªÉ n√≥ ƒë·ª©t ·ªü ƒë√¢y ‚Äî ch·ªâ c·∫ßn 3 ph√∫t quiz ƒë·ªÉ ti·∫øp t·ª•c!'
        },
        {
          'title': '‚≠ê $streakDays ng√†y ki√™n tr√¨!',
          'body': 'B·∫°n ƒë√£ l√†m ƒë∆∞·ª£c ƒëi·ªÅu tuy·ªát v·ªùi ‚Äî h√£y duy tr√¨ ƒë√† n√†y!'
        }
      ];
    } else {
      return [
        {
          'title': 'üå± Chu·ªói $streakDays ng√†y ƒëang l·ªõn!',
          'body': 'Quiz nhanh ƒë·ªÉ nu√¥i d∆∞·ª°ng th√≥i quen t·ªët n√†y nh√©!'
        },
        {
          'title': 'üí™ Ti·∫øp t·ª•c chu·ªói $streakDays ng√†y!',
          'body': 'M·ªói ng√†y m·ªôt ch√∫t ‚Äî b·∫°n ƒëang x√¢y d·ª±ng th√≥i quen tuy·ªát v·ªùi!'
        }
      ];
    }
  }

  /// Get next instance of specific time
  tz.TZDateTime _nextInstanceOf(int hour, int minute) {
    final now = tz.TZDateTime.now(tz.local);
    var scheduledDate = tz.TZDateTime(tz.local, now.year, now.month, now.day, hour, minute);
    
    if (scheduledDate.isBefore(now)) {
      scheduledDate = scheduledDate.add(const Duration(days: 1));
    }
    
    return scheduledDate;
  }

  /// Evening review check - called by scheduled notification
  Future<void> performEveningReviewCheck() async {
    final prefs = await SharedPreferences.getInstance();
    final lastQuizDate = prefs.getString('last_quiz_date');
    final today = DateTime.now();
    final todayString = '${today.year}-${today.month}-${today.day}';

    // If no quiz today, send evening motivation
    if (lastQuizDate == null || lastQuizDate != todayString) {
      await _showEveningReviewNotification();
    }
  }

  /// Show evening review notification
  Future<void> _showEveningReviewNotification() async {
    final notifications = [
      {
        'title': 'üåô K·∫øt th√∫c ng√†y th·∫≠t tr·ªçn v·∫πn!',
        'body': 'Ch·ªâ c·∫ßn 3 ph√∫t quiz ‚Äî b·∫°n s·∫Ω ng·ªß ngon h∆°n v·ªõi ki·∫øn th·ª©c v·ªØng ch·∫Øc!'
      },
      {
        'title': '‚ú® T·ªïng k·∫øt ng√†y h·ªçc t·∫≠p!',
        'body': 'Quiz nhanh ƒë·ªÉ xem h√¥m nay b·∫°n ƒë√£ ti·∫øn b·ªô nh∆∞ th·∫ø n√†o!'
      },
      {
        'title': 'üéØ Ho√†n thi·ªán ng√†y h·ªçc!',
        'body': 'M·ªôt b√†i quiz nh·ªè ƒë·ªÉ kh√©p l·∫°i ng√†y h·ªçc t·∫≠p hi·ªáu qu·∫£!'
      }
    ];

    final notification = notifications[Random().nextInt(notifications.length)];

    await _notifications.show(
      eveningReviewId,
      notification['title']!,
      notification['body']!,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'evening_review',
          '√în t·∫≠p bu·ªïi t·ªëi',
          channelDescription: 'Nh·∫Øc nh·ªü √¥n t·∫≠p bu·ªïi t·ªëi',
          importance: Importance.defaultImportance,
          priority: Priority.defaultPriority,
        ),
      ),
      payload: 'evening_review',
    );
  }

  /// Cancel all smart notifications
  Future<void> cancelAllSmartNotifications() async {
    await _notifications.cancel(smartQuizReminderId);
    await _notifications.cancel(afterLearningQuizId);
    await _notifications.cancel(forgettingWordsId);
    await _notifications.cancel(streakMotivationId);
    await _notifications.cancel(eveningReviewId);
  }
}
