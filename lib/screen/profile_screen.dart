import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../service/auth_service.dart';
import '../service/notification_service.dart';
import '../repository/word_repository.dart';
import '../repository/topic_repository.dart';
import '../repository/quiz_repository.dart';
import '../repository/user_progress_repository.dart';

class ProfileScreen extends StatefulWidget {
  final Function(VoidCallback)? onRefreshCallback;
  
  const ProfileScreen({Key? key, this.onRefreshCallback}) : super(key: key);

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  Map<String, List<dynamic>> reviewedWordsByTopic = {};
  int totalWordsLearned = 0;
  int totalWordsInQuiz = 0;
  int dueWordsCount = 0;
  int currentStreak = 0;
  int longestStreak = 0;
  double accuracy = 0.0;
  int totalTopics = 0;
  int todayWordsLearned = 0;
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadUserStats();
    // ƒêƒÉng k√Ω callback v·ªõi MainLayout
    widget.onRefreshCallback?.call(_loadUserStats);
  }

  Future<void> _loadUserStats() async {
    try {
      setState(() {
        isLoading = true;
      });

      final prefs = await SharedPreferences.getInstance();
      final wordRepo = WordRepository();
      final topicRepo = TopicRepository();
      final quizRepo = QuizRepository();
      final progressRepo = UserProgressRepository();

      // Get comprehensive user statistics from UserProgressRepository
      final userStats = await progressRepo.getUserStatistics();
      
      // Get quiz statistics
      final quizStats = await quizRepo.getQuizStats();
      final quizWords = await quizRepo.getQuizWords();
      final dueWords = await quizRepo.getDueWords();

      // Get all topics for total count
      final topics = await topicRepo.getTopics();

      // Combine accuracy from both Quiz and Flashcard (UserProgress)
      double combinedAccuracy = 0.0;
      int totalCorrectAnswers = 0;
      int totalAttempts = 0;
      
      // Add Quiz stats
      totalCorrectAnswers += (quizStats['correctAnswers'] ?? 0) as int;
      totalAttempts += (quizStats['totalAttempts'] ?? 0) as int;
      
      // Add UserProgress stats (from flashcards)
      totalCorrectAnswers += (userStats['totalCorrectAnswers'] ?? 0) as int;
      totalAttempts += (userStats['totalAttempts'] ?? 0) as int;
      
      if (totalAttempts > 0) {
        combinedAccuracy = (totalCorrectAnswers / totalAttempts) * 100;
      }

      // Get comprehensive words learned count from UserProgressRepository
      final totalLearnedFromProgress = userStats['totalLearnedWords'] ?? 0;
      
      // Also get reviewed words for topic breakdown (for compatibility)
      final reviewedWords = await wordRepo.getReviewedWordsGroupedByTopic();

      // Use streak data from UserProgressRepository (more comprehensive)
      final currentStreakValue = userStats['streakDays'] ?? 0;
      final longestStreakValue = userStats['longestStreak'] ?? 0;

      // Get today's words learned from comprehensive calculation
      final today = DateTime.now();
      final todayKey = '${today.year}-${today.month}-${today.day}';
      
      // Try to get from UserProgressRepository first, then fallback to SharedPreferences
      int todayWords = prefs.getInt('words_learned_$todayKey') ?? 0;
      
      // Also check if there are any words learned today from progress tracking
      try {
        final allTopicsProgress = await progressRepo.getAllTopicsProgress();
        int todayWordsFromProgress = 0;
        
        for (final topicProgress in allTopicsProgress.values) {
          final lastStudied = topicProgress['lastStudied'];
          if (lastStudied != null) {
            final lastStudiedDate = DateTime.parse(lastStudied);
            if (lastStudiedDate.year == today.year && 
                lastStudiedDate.month == today.month && 
                lastStudiedDate.day == today.day) {
              // This topic was studied today, count its contribution
              final sessions = topicProgress['sessions'] ?? 0;
              if (sessions > 0) {
                todayWordsFromProgress += (topicProgress['learnedWords'] ?? 0) as int;
              }
            }
          }
        }
        
        // Use the higher value between SharedPreferences and calculated from progress
        todayWords = todayWords > todayWordsFromProgress ? todayWords : todayWordsFromProgress;
      } catch (e) {
        print('Error calculating today words from progress: $e');
        // Keep the SharedPreferences value
      }

      setState(() {
        // Use comprehensive learned words count from UserProgressRepository
        totalWordsLearned = totalLearnedFromProgress;
        reviewedWordsByTopic = reviewedWords;
        totalWordsInQuiz = quizWords.length;
        dueWordsCount = dueWords.length;
        // Use combined accuracy from both Quiz and Flashcard
        accuracy = combinedAccuracy;
        currentStreak = currentStreakValue;
        longestStreak = longestStreakValue;
        totalTopics = topics.length;
        todayWordsLearned = todayWords;
        isLoading = false;
      });

      // Debug information
      print('üìä Profile Stats Summary:');
      print('  - Total Words Learned (UserProgress): $totalLearnedFromProgress');
      print('  - Today Words Learned: $todayWords');
      print('  - Quiz Stats: ${quizStats['correctAnswers']}/${quizStats['totalAttempts']} (${quizStats['totalAttempts'] > 0 ? ((quizStats['correctAnswers'] / quizStats['totalAttempts']) * 100).toStringAsFixed(1) : 0}%)');
      print('  - Flashcard Stats: ${userStats['totalCorrectAnswers']}/${userStats['totalAttempts']} (${userStats['totalAttempts'] > 0 ? ((userStats['totalCorrectAnswers'] / userStats['totalAttempts']) * 100).toStringAsFixed(1) : 0}%)');
      print('  - Combined Accuracy: ${combinedAccuracy.toStringAsFixed(1)}%');
      print('  - Current Streak: $currentStreakValue days');
      print('  - Longest Streak: $longestStreakValue days');
      print('  - Total Attempts (Quiz + Flashcard): $totalAttempts');
      print('  - Total Correct (Quiz + Flashcard): $totalCorrectAnswers');

    } catch (error) {
      print('Error loading user stats: $error');
      setState(() {
        isLoading = false;
      });
    }
  }

  /// Method ƒë·ªÉ test v√† hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ t√≠ch h·ª£p d·ªØ li·ªáu
  Future<void> testProgressIntegration() async {
    print('üß™ Testing Progress Integration...');
    
    try {
      final progressRepo = UserProgressRepository();
      final quizRepo = QuizRepository();
      
      // Test UserProgressRepository
      final userStats = await progressRepo.getUserStatistics();
      print('üìä UserProgressRepository Stats:');
      print('  - Total Learned Words: ${userStats['totalLearnedWords']}');
      print('  - Total Correct Answers: ${userStats['totalCorrectAnswers']}');
      print('  - Total Attempts: ${userStats['totalAttempts']}');
      print('  - Average Accuracy: ${userStats['avgAccuracy']}%');
      print('  - Active Topics: ${userStats['activeTopics']}');
      print('  - Streak Days: ${userStats['streakDays']}');
      
      // Test QuizRepository
      final quizStats = await quizRepo.getQuizStats();
      print('üìù QuizRepository Stats:');
      print('  - Correct Answers: ${quizStats['correctAnswers']}');
      print('  - Total Attempts: ${quizStats['totalAttempts']}');
      print('  - Accuracy: ${quizStats['totalAttempts'] > 0 ? ((quizStats['correctAnswers'] / quizStats['totalAttempts']) * 100).toStringAsFixed(1) : 0}%');
      
      // Test combined calculation
      final totalCorrect = (userStats['totalCorrectAnswers'] ?? 0) + (quizStats['correctAnswers'] ?? 0);
      final totalAttempts = (userStats['totalAttempts'] ?? 0) + (quizStats['totalAttempts'] ?? 0);
      final combinedAccuracy = totalAttempts > 0 ? (totalCorrect / totalAttempts) * 100 : 0.0;
      
      print('üîÑ Combined Stats:');
      print('  - Total Correct: $totalCorrect');
      print('  - Total Attempts: $totalAttempts');
      print('  - Combined Accuracy: ${combinedAccuracy.toStringAsFixed(1)}%');
      
      print('‚úÖ Progress integration test completed!');
    } catch (e) {
      print('‚ùå Error in progress integration test: $e');
    }
  }

  // Helper method to update streak data (can be called from other screens like QuizGameScreen)
  // ignore: unused_element
  static Future<void> updateStreakData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final today = DateTime.now();
      final lastActiveDate = prefs.getString('last_active_date');
      
      if (lastActiveDate == null) {
        // First time user
        await prefs.setInt('current_streak', 1);
        await prefs.setInt('longest_streak', 1);
        await prefs.setString('last_active_date', today.toIso8601String());
      } else {
        final lastActive = DateTime.parse(lastActiveDate);
        final daysDifference = today.difference(lastActive).inDays;
        
        if (daysDifference == 1) {
          // Consecutive day
          final currentStreak = prefs.getInt('current_streak') ?? 0;
          final newStreak = currentStreak + 1;
          await prefs.setInt('current_streak', newStreak);
          
          // Update longest streak if needed
          final longestStreak = prefs.getInt('longest_streak') ?? 0;
          if (newStreak > longestStreak) {
            await prefs.setInt('longest_streak', newStreak);
          }
          
          await prefs.setString('last_active_date', today.toIso8601String());
        } else if (daysDifference > 1) {
          // Streak broken
          await prefs.setInt('current_streak', 1);
          await prefs.setString('last_active_date', today.toIso8601String());
        }
        // If daysDifference == 0, same day, no update needed
      }
    } catch (error) {
      print('Error updating streak data: $error');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: isLoading 
        ? const Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                CircularProgressIndicator(),
                SizedBox(height: 16),
                Text('Loading your progress...'),
              ],
            ),
          )
        : RefreshIndicator(
            onRefresh: _loadUserStats,
            child: SingleChildScrollView(
        child: Column(
          children: [
          
            Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Statistics Cards
                  const Text(
                    'Ti·∫øn ƒê·ªô C·ªßa B·∫°n',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 12),
                  
                  Row(
                    children: [
                      Expanded(
                        child: _buildStatCard(
                          'T·ªïng T·ª´ ƒê√£ H·ªçc\n(Quiz + Flashcard)',
                          totalWordsLearned.toString(),
                          Icons.school,
                          Colors.blue,
                        ),
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: _buildStatCard(
                          'T·ª´ H√¥m Nay',
                          todayWordsLearned.toString(),
                          Icons.today,
                          Colors.cyan,
                        ),
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 8),
                  
                  Row(
                    children: [
                      Expanded(
                        child: _buildStatCard(
                          'Chu·ªói Hi·ªán T·∫°i',
                          '$currentStreak days',
                          Icons.local_fire_department,
                          Colors.orange,
                        ),
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: _buildStatCard(
                          'Chu·ªói D√†i Nh·∫•t',
                          '$longestStreak days',
                          Icons.emoji_events,
                          Colors.green,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      Expanded(
                        child: _buildStatCard(
                          'ƒê·ªô Ch√≠nh X√°c\n(Quiz + Flashcard)',
                          '${accuracy.toStringAsFixed(1)}%',
                          Icons.trending_up,
                          Colors.purple,
                        ),
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: _buildStatCard(
                          'T·ª´ Quiz',
                          totalWordsInQuiz.toString(),
                          Icons.quiz,
                          Colors.indigo,
                        ),
                      ),
                    ],
                  ),

                  const SizedBox(height: 8),
                  
                  Row(
                    children: [
                      Expanded(
                        child: _buildStatCard(
                          'T·ª´ C·∫ßn √în',
                          dueWordsCount.toString(),
                          Icons.schedule,
                          Colors.red,
                        ),
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: _buildStatCard(
                          'T·ªïng Ch·ªß ƒê·ªÅ',
                          totalTopics.toString(),
                          Icons.topic,
                          Colors.teal,
                        ),
                      ),
                    ],
                  ),

                  const SizedBox(height: 24),

                  // Achievements Section
                  const Text(
                    'Th√†nh T√≠ch',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 12),
                  
                  SizedBox(
                    height: 100,
                    child: ListView(
                      scrollDirection: Axis.horizontal,
                      children: _buildAchievementsList(),
                    ),
                  ),

                  const SizedBox(height: 24),

                  // Settings Section
                  const Text(
                    'C√†i ƒê·∫∑t',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 12),

                  _buildSettingsItem(
                    icon: Icons.notifications,
                    title: 'Th√¥ng B√°o',
                    subtitle: 'Nh·∫Øc nh·ªü h√†ng ng√†y v√† c·∫≠p nh·∫≠t',
                    onTap: () {
                      _showNotificationSettings();
                    },
                  ),

                  _buildSettingsItem(
                    icon: Icons.volume_up,
                    title: '√Çm Thanh',
                    subtitle: 'Gi·ªçng n√≥i v√† hi·ªáu ·ª©ng √¢m thanh',
                    onTap: () {
                      // Handle sound settings
                    },
                  ),

                  _buildSettingsItem(
                    icon: Icons.help,
                    title: 'Help & Support',
                    subtitle: 'C√¢u h·ªèi th∆∞·ªùng g·∫∑p v√† li√™n h·ªá',
                    onTap: () {
                      // Handle help
                    },
                  ),

                  _buildSettingsItem(
                    icon: Icons.privacy_tip,
                    title: 'Ch√≠nh S√°ch B·∫£o M·∫≠t',
                    subtitle: 'ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán',
                    onTap: () {
                      // Handle privacy policy
                    },
                  ),

                  const SizedBox(height: 20),

                  //Clear Local Data Button
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: () {
                        _showClearDataDialog();
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.orange.shade50,
                        foregroundColor: Colors.orange,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: BorderSide(color: Colors.orange.shade200),
                        ),
                      ),
                      child: const Text(
                        'X√≥a D·ªØ Li·ªáu C·ª•c B·ªô',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),

                  const SizedBox(height: 16),

                  // Sign Out Button
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: () {
                        _showSignOutDialog();
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red.shade50,
                        foregroundColor: Colors.red,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: BorderSide(color: Colors.red.shade200),
                        ),
                      ),
                      child: const Text(
                        'ƒêƒÉng Xu·∫•t',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),

                  const SizedBox(height: 40),
                ],
              ),
            ),
          ],
        ),
            ),
          ),
    );
  }

  Widget _buildStatCard(String title, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(height: 6),
          Text(
            value,
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          const SizedBox(height: 2),
          Text(
            title,
            style: TextStyle(
              fontSize: 10,
              color: Colors.grey[600],
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  List<Widget> _buildAchievementsList() {
    List<Widget> achievements = [];

    // First Word Achievement
    if (totalWordsLearned > 0) {
      achievements.add(_buildAchievementBadge('T·ª´ ƒê·∫ßu Ti√™n', Icons.star, Colors.amber));
    }

    // Streak Achievements
    if (currentStreak >= 3) {
      achievements.add(_buildAchievementBadge('3 Day Streak', Icons.local_fire_department, Colors.orange));
    }
    if (currentStreak >= 7) {
      achievements.add(_buildAchievementBadge('7 Day Streak', Icons.local_fire_department, Colors.deepOrange));
    }
    if (longestStreak >= 30) {
      achievements.add(_buildAchievementBadge('30 Day Streak', Icons.emoji_events, Colors.red));
    }

    // Words Learned Achievements
    if (totalWordsLearned >= 10) {
      achievements.add(_buildAchievementBadge('10 Words', Icons.school, Colors.blue));
    }
    if (totalWordsLearned >= 50) {
      achievements.add(_buildAchievementBadge('50 Words', Icons.school, Colors.indigo));
    }
    if (totalWordsLearned >= 100) {
      achievements.add(_buildAchievementBadge('100 Words', Icons.school, Colors.purple));
    }

    // Quiz Achievements
    if (totalWordsInQuiz >= 20) {
      achievements.add(_buildAchievementBadge('B·∫≠c Th·∫ßy Quiz', Icons.quiz, Colors.green));
    }
    if (accuracy >= 80.0) {
      achievements.add(_buildAchievementBadge('ƒê·ªô Ch√≠nh X√°c Cao', Icons.trending_up, Colors.teal));
    }

    // Topic Achievements
    if (reviewedWordsByTopic.length >= 3) {
      achievements.add(_buildAchievementBadge('Nh√† Kh√°m Ph√°', Icons.explore, Colors.cyan));
    }

    // Daily Achievements
    if (todayWordsLearned >= 5) {
      achievements.add(_buildAchievementBadge('M·ª•c Ti√™u H√†ng Ng√†y', Icons.today, Colors.lightBlue));
    }
    if (todayWordsLearned >= 10) {
      achievements.add(_buildAchievementBadge('Si√™u H·ªçc Vi√™n', Icons.star_rate, Colors.amber));
    }

    // If no achievements, show placeholder
    if (achievements.isEmpty) {
      achievements.add(_buildAchievementBadge('B·∫Øt ƒê·∫ßu H·ªçc', Icons.play_arrow, Colors.grey));
    }

    return achievements;
  }

  Widget _buildAchievementBadge(String title, IconData icon, Color color) {
    return Container(
      width: 80,
      margin: const EdgeInsets.only(right: 12),
      child: Column(
        children: [
          Container(
            width: 60,
            height: 60,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: color.withOpacity(0.2),
              border: Border.all(color: color, width: 2),
            ),
            child: Icon(icon, color: color, size: 24),
          ),
          const SizedBox(height: 8),
          Text(
            title,
            style: const TextStyle(
              fontSize: 10,
              fontWeight: FontWeight.bold,
            ),
            textAlign: TextAlign.center,
            maxLines: 2,
          ),
        ],
      ),
    );
  }

  Widget _buildSettingsItem({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
  }) {
    return Card(
      margin: const EdgeInsets.only(bottom: 8),
      child: ListTile(
        leading: Container(
          width: 40,
          height: 40,
          decoration: BoxDecoration(
            color: Theme.of(context).primaryColor.withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(
            icon,
            color: Theme.of(context).primaryColor,
            size: 20,
          ),
        ),
        title: Text(
          title,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
          ),
        ),
        subtitle: Text(subtitle),
        trailing: const Icon(Icons.chevron_right),
        onTap: onTap,
      ),
    );
  }

    void _showSignOutDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('ƒêƒÉng Xu·∫•t'),
          content: const Text('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t? ƒêi·ªÅu n√†y s·∫Ω x√≥a t·∫•t c·∫£ d·ªØ li·ªáu c·ª•c b·ªô c·ªßa b·∫°n.'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('H·ªßy'),
            ),
            TextButton(
              onPressed: () async {
                Navigator.of(context).pop();
                await _handleSignOut();
              },
              style: TextButton.styleFrom(
                foregroundColor: Colors.red,
              ),
              child: const Text('ƒêƒÉng Xu·∫•t'),
            ),
          ],
        );
      },
    );
  }

  void _showClearDataDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('X√≥a D·ªØ Li·ªáu C·ª•c B·ªô'),
          content: const Text('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ d·ªØ li·ªáu c·ª•c b·ªô? ƒêi·ªÅu n√†y s·∫Ω x√≥a t·∫•t c·∫£ ch·ªß ƒë·ªÅ v√† t·ª´ v·ª±ng ƒë√£ l∆∞u. B·∫°n c√≥ th·ªÉ l√†m m·ªõi d·ªØ li·ªáu b·∫±ng c√°ch ƒëi·ªÅu h∆∞·ªõng qua ·ª©ng d·ª•ng l·∫°i.'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('H·ªßy'),
            ),
            TextButton(
              onPressed: () async {
                Navigator.of(context).pop();
                await _clearLocalData();
              },
              style: TextButton.styleFrom(
                foregroundColor: Colors.orange,
              ),
              child: const Text('X√≥a D·ªØ Li·ªáu'),
            ),
          ],
        );
      },
    );
  }

  Future<void> _clearLocalData() async {
    try {
      // Show loading indicator
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) {
          return const AlertDialog(
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                CircularProgressIndicator(),
                SizedBox(height: 16),
                Text('Clearing local data...'),
              ],
            ),
          );
        },
      );

      final prefs = await SharedPreferences.getInstance();
      
      // Get all keys and remove those related to words and topics
      final keys = prefs.getKeys();
      final keysToRemove = keys.where((key) => 
        key.startsWith('words_') || 
        key.startsWith('cached_topics') ||
        key.startsWith('reviewed_words_')
      ).toList();

      for (String key in keysToRemove) {
        await prefs.remove(key);
      }

      // Close loading dialog
      if (Navigator.of(context).canPop()) {
        Navigator.of(context).pop();
      }

      // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Local data cleared successfully!'),
          backgroundColor: Colors.green,
        ),
      );

      print('Local data cleared!');

    } catch (error) {
      // Close loading dialog if it's open
      if (Navigator.of(context).canPop()) {
        Navigator.of(context).pop();
      }

      // Show error message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error clearing data: $error'),
          backgroundColor: Colors.red,
        ),
      );
      print('Error clearing data: $error');
    }
  }

  Future<void> _handleSignOut() async {
    try {
      // Show loading indicator
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) {
          return const Center(
            child: CircularProgressIndicator(),
          );
        },
      );

      // Sign out using AuthService
      await AuthService().signOut();

      // Close loading dialog
      if (Navigator.of(context).canPop()) {
        Navigator.of(context).pop();
      }

      // Navigate to login page (replace entire navigation stack)
      Navigator.of(context).pushNamedAndRemoveUntil(
        '/login',
        (Route<dynamic> route) => false,
      );

    } catch (error) {
      // Close loading dialog if it's open
      if (Navigator.of(context).canPop()) {
        Navigator.of(context).pop();
      }

      // Show error message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error signing out: $error'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _showNotificationSettings() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => const NotificationSettingsSheet(),
    );
  }

}

class NotificationSettingsSheet extends StatefulWidget {
  const NotificationSettingsSheet({Key? key}) : super(key: key);

  @override
  State<NotificationSettingsSheet> createState() => _NotificationSettingsSheetState();
}

class _NotificationSettingsSheetState extends State<NotificationSettingsSheet> {
  bool _notificationsEnabled = true;
  bool _morningReminderEnabled = true;
  bool _noonReminderEnabled = true;
  bool _eveningReminderEnabled = true;
  bool _streakWarningEnabled = true;
  bool _dueWordsEnabled = true;
  bool _goalProgressEnabled = true;
  
  // Phase 2 settings
  bool _achievementEnabled = true;
  bool _weeklySummaryEnabled = true;
  bool _streakMilestoneEnabled = true;
  bool _quizReminderEnabled = true;
  bool _comebackEnabled = true;
  
  TimeOfDay _morningTime = const TimeOfDay(hour: 8, minute: 0);
  TimeOfDay _noonTime = const TimeOfDay(hour: 11, minute: 45);
  TimeOfDay _eveningTime = const TimeOfDay(hour: 19, minute: 0);

  @override
  void initState() {
    super.initState();
    _loadSettings();
  }

  Future<void> _loadSettings() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _notificationsEnabled = prefs.getBool('notifications_enabled') ?? true;
      _morningReminderEnabled = prefs.getBool('morning_reminder_enabled') ?? true;
      _noonReminderEnabled = prefs.getBool('noon_reminder_enabled') ?? true;
      _eveningReminderEnabled = prefs.getBool('evening_reminder_enabled') ?? true;
      _streakWarningEnabled = prefs.getBool('streak_warning_enabled') ?? true;
      _dueWordsEnabled = prefs.getBool('due_words_enabled') ?? true;
      _goalProgressEnabled = prefs.getBool('goal_progress_enabled') ?? true;
      
      // Phase 2 settings
      _achievementEnabled = prefs.getBool('achievement_enabled') ?? true;
      _weeklySummaryEnabled = prefs.getBool('weekly_summary_enabled') ?? true;
      _streakMilestoneEnabled = prefs.getBool('streak_milestone_enabled') ?? true;
      _quizReminderEnabled = prefs.getBool('quiz_reminder_enabled') ?? true;
      _comebackEnabled = prefs.getBool('comeback_enabled') ?? true;
      
      final morningHour = prefs.getInt('morning_reminder_hour') ?? 8;
      final morningMinute = prefs.getInt('morning_reminder_minute') ?? 0;
      final noonHour = prefs.getInt('noon_reminder_hour') ?? 11;
      final noonMinute = prefs.getInt('noon_reminder_minute') ?? 45;
      final eveningHour = prefs.getInt('evening_reminder_hour') ?? 19;
      final eveningMinute = prefs.getInt('evening_reminder_minute') ?? 0;
      
      _morningTime = TimeOfDay(hour: morningHour, minute: morningMinute);
      _noonTime = TimeOfDay(hour: noonHour, minute: noonMinute);
      _eveningTime = TimeOfDay(hour: eveningHour, minute: eveningMinute);
    });
  }

  Future<void> _saveSettings() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('notifications_enabled', _notificationsEnabled);
    await prefs.setBool('morning_reminder_enabled', _morningReminderEnabled);
    await prefs.setBool('noon_reminder_enabled', _noonReminderEnabled);
    await prefs.setBool('evening_reminder_enabled', _eveningReminderEnabled);
    await prefs.setBool('streak_warning_enabled', _streakWarningEnabled);
    await prefs.setBool('due_words_enabled', _dueWordsEnabled);
    await prefs.setBool('goal_progress_enabled', _goalProgressEnabled);
    
    // Phase 2 settings
    await prefs.setBool('achievement_enabled', _achievementEnabled);
    await prefs.setBool('weekly_summary_enabled', _weeklySummaryEnabled);
    await prefs.setBool('streak_milestone_enabled', _streakMilestoneEnabled);
    await prefs.setBool('quiz_reminder_enabled', _quizReminderEnabled);
    await prefs.setBool('comeback_enabled', _comebackEnabled);
    
    await prefs.setInt('morning_reminder_hour', _morningTime.hour);
    await prefs.setInt('morning_reminder_minute', _morningTime.minute);
    await prefs.setInt('noon_reminder_hour', _noonTime.hour);
    await prefs.setInt('noon_reminder_minute', _noonTime.minute);
    await prefs.setInt('evening_reminder_hour', _eveningTime.hour);
    await prefs.setInt('evening_reminder_minute', _eveningTime.minute);

    // Update notification service
    final notificationService = NotificationService();
    await notificationService.setNotificationsEnabled(_notificationsEnabled);
    if (_notificationsEnabled) {
      await notificationService.scheduleDailyReminders();
      await notificationService.runExtendedNotificationChecks();
    }
  }

  @override
  Widget build(BuildContext context) {
    return DraggableScrollableSheet(
      initialChildSize: 0.85,
      minChildSize: 0.4,
      maxChildSize: 0.95,
      expand: false,
      builder: (context, scrollController) {
        return Container(
          decoration: const BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
          ),
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
          // Drag handle
          Center(
            child: Container(
              width: 40,
              height: 4,
              margin: const EdgeInsets.only(bottom: 20),
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(2),
              ),
            ),
          ),
          
          // Header
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                'C√†i ƒê·∫∑t Th√¥ng B√°o',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              IconButton(
                onPressed: () => Navigator.pop(context),
                icon: const Icon(Icons.close),
              ),
            ],
          ),
          
          const SizedBox(height: 20),
          
          // Scrollable content
          Expanded(
            child: SingleChildScrollView(
              controller: scrollController,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
          // Master toggle
          _buildSwitchTile(
            title: 'B·∫≠t Th√¥ng B√°o',
            subtitle: 'B·∫≠t/t·∫Øt t·∫•t c·∫£ th√¥ng b√°o',
            value: _notificationsEnabled,
            onChanged: (value) {
              setState(() {
                _notificationsEnabled = value;
              });
              _saveSettings();
            },
            icon: Icons.notifications,
          ),
          
          if (_notificationsEnabled) ...[
            const Divider(height: 30),
            
            // Daily Reminders Section
            const Text(
              'Nh·∫Øc Nh·ªü H√†ng Ng√†y',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.grey,
              ),
            ),
            const SizedBox(height: 10),
            
            _buildSwitchTile(
              title: 'Nh·∫Øc Nh·ªü Bu·ªïi S√°ng',
              subtitle: 'Nh·∫Øc nh·ªü h·ªçc t·∫≠p h√†ng ng√†y l√∫c ${_morningTime.format(context)}',
              value: _morningReminderEnabled,
              onChanged: (value) {
                setState(() {
                  _morningReminderEnabled = value;
                });
                _saveSettings();
              },
              icon: Icons.wb_sunny,
              trailing: _morningReminderEnabled 
                ? IconButton(
                    icon: const Icon(Icons.access_time),
                    onPressed: () => _selectTime('morning'),
                  )
                : null,
            ),
            
            _buildSwitchTile(
              title: 'Nh·∫Øc Nh·ªü Bu·ªïi Tr∆∞a',
              subtitle: 'Nh·∫Øc nh·ªü h·ªçc t·∫≠p l√∫c ${_noonTime.format(context)}',
              value: _noonReminderEnabled,
              onChanged: (value) {
                setState(() {
                  _noonReminderEnabled = value;
                });
                _saveSettings();
              },
              icon: Icons.wb_sunny,
              trailing: _noonReminderEnabled
                ? IconButton(
                    icon: const Icon(Icons.access_time),
                    onPressed: () => _selectTime('noon'),
                  )
                : null,
            ),
            
            _buildSwitchTile(
              title: '√în T·∫≠p Bu·ªïi T·ªëi',
              subtitle: 'Nh·∫Øc nh·ªü √¥n t·∫≠p l√∫c ${_eveningTime.format(context)}',
              value: _eveningReminderEnabled,
              onChanged: (value) {
                setState(() {
                  _eveningReminderEnabled = value;
                });
                _saveSettings();
              },
              icon: Icons.nightlight_round,
              trailing: _eveningReminderEnabled 
                ? IconButton(
                    icon: const Icon(Icons.access_time),
                    onPressed: () => _selectTime('evening'),
                  )
                : null,
            ),
            
            const Divider(height: 30),
            
            // Other Notifications Section
            const Text(
              'C·∫£nh B√°o H·ªçc T·∫≠p',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.grey,
              ),
            ),
            const SizedBox(height: 10),
            
            _buildSwitchTile(
              title: 'C·∫£nh B√°o Chu·ªói H·ªçc',
              subtitle: 'Nh·∫Øc nh·ªü duy tr√¨ chu·ªói h·ªçc t·∫≠p',
              value: _streakWarningEnabled,
              onChanged: (value) {
                setState(() {
                  _streakWarningEnabled = value;
                });
                _saveSettings();
              },
              icon: Icons.local_fire_department,
            ),
            
            _buildSwitchTile(
              title: 'Nh·∫Øc Nh·ªü √în T·∫≠p',
              subtitle: 'Th√¥ng b√°o khi c√≥ t·ª´ c·∫ßn √¥n t·∫≠p',
              value: _dueWordsEnabled,
              onChanged: (value) {
                setState(() {
                  _dueWordsEnabled = value;
                });
                _saveSettings();
              },
              icon: Icons.quiz,
            ),
            
            _buildSwitchTile(
              title: 'Ti·∫øn ƒê·ªô M·ª•c Ti√™u',
              subtitle: 'C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô h·ªçc t·∫≠p h√†ng ng√†y',
              value: _goalProgressEnabled,
              onChanged: (value) {
                setState(() {
                  _goalProgressEnabled = value;
                });
                _saveSettings();
              },
              icon: Icons.track_changes,
            ),
            
            const Divider(height: 30),
            
            // Phase 2 Notifications Section
            const Text(
              'Th√†nh T√≠ch & C·ªët M·ªëc',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.grey,
              ),
            ),
            const SizedBox(height: 10),
            
            _buildSwitchTile(
              title: 'Th√¥ng B√°o Th√†nh T√≠ch',
              subtitle: 'Ch√∫c m·ª´ng c√°c c·ªët m·ªëc h·ªçc t·∫≠p',
              value: _achievementEnabled,
              onChanged: (value) {
                setState(() {
                  _achievementEnabled = value;
                });
                _saveSettings();
              },
              icon: Icons.emoji_events,
            ),
            
            _buildSwitchTile(
              title: 'C·ªët M·ªëc Chu·ªói H·ªçc',
              subtitle: 'Celebrate 7, 30, 100+ day streaks',
              value: _streakMilestoneEnabled,
              onChanged: (value) {
                setState(() {
                  _streakMilestoneEnabled = value;
                });
                _saveSettings();
              },
              icon: Icons.local_fire_department,
            ),
            
            _buildSwitchTile(
              title: 'T·ªïng K·∫øt Tu·∫ßn',
              subtitle: 'B√°o c√°o ti·∫øn ƒë·ªô t·ªëi Ch·ªß nh·∫≠t',
              value: _weeklySummaryEnabled,
              onChanged: (value) {
                setState(() {
                  _weeklySummaryEnabled = value;
                });
                _saveSettings();
              },
              icon: Icons.bar_chart,
            ),
            
            const Divider(height: 30),
            
            // Engagement Notifications Section
            const Text(
              'T∆∞∆°ng T√°c & ƒê·ªông L·ª±c',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.grey,
              ),
            ),
            const SizedBox(height: 10),
            
            _buildSwitchTile(
              title: 'Nh·∫Øc Nh·ªü Ki·ªÉm Tra',
              subtitle: 'Remind to take quizzes every 2 days',
              value: _quizReminderEnabled,
              onChanged: (value) {
                setState(() {
                  _quizReminderEnabled = value;
                });
                _saveSettings();
              },
              icon: Icons.quiz,
            ),
            
            _buildSwitchTile(
              title: 'Tin Nh·∫Øn Tr·ªü L·∫°i',
              subtitle: 'Tin nh·∫Øn kh√≠ch l·ªá khi kh√¥ng ho·∫°t ƒë·ªông',
              value: _comebackEnabled,
              onChanged: (value) {
                setState(() {
                  _comebackEnabled = value;
                });
                _saveSettings();
              },
              icon: Icons.favorite,
            ),
          ],
          
          const SizedBox(height: 20),
                ],
              ),
            ),
          ),
        ],
      ),
        );
      },
    );
  }

  Widget _buildSwitchTile({
    required String title,
    required String subtitle,
    required bool value,
    required ValueChanged<bool> onChanged,
    required IconData icon,
    Widget? trailing,
  }) {
    return ListTile(
      leading: Container(
        width: 40,
        height: 40,
        decoration: BoxDecoration(
          color: Theme.of(context).primaryColor.withOpacity(0.1),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Icon(
          icon,
          color: Theme.of(context).primaryColor,
          size: 20,
        ),
      ),
      title: Text(
        title,
        style: const TextStyle(fontWeight: FontWeight.bold),
      ),
      subtitle: Text(subtitle),
      trailing: trailing ?? Switch(
        value: value,
        onChanged: onChanged,
        activeColor: Theme.of(context).primaryColor,
      ),
      contentPadding: const EdgeInsets.symmetric(horizontal: 0),
    );
  }

  Future<void> _selectTime(String timeType) async {
    TimeOfDay initialTime;
    switch (timeType) {
      case 'morning':
        initialTime = _morningTime;
        break;
      case 'noon':
        initialTime = _noonTime;
        break;
      case 'evening':
        initialTime = _eveningTime;
        break;
      default:
        initialTime = _morningTime;
    }
    
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: initialTime,
    );
    
    if (picked != null) {
      setState(() {
        switch (timeType) {
          case 'morning':
            _morningTime = picked;
            break;
          case 'noon':
            _noonTime = picked;
            break;
          case 'evening':
            _eveningTime = picked;
            break;
        }
      });
      await _saveSettings();
    }
  }

}
