import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'notification_debug_screen.dart';

class HelpSupportScreen extends StatelessWidget {
  const HelpSupportScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Help & Support'),
        backgroundColor: Theme.of(context).primaryColor,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Contact Support Section
            _buildContactSection(context),
            
            const SizedBox(height: 24),
            
            // FAQ Section
            _buildFAQSection(context),
            
            const SizedBox(height: 24),
            
            // App Information
            _buildAppInfoSection(context),
            
            const SizedBox(height: 24),
            
            // Quick Actions
            _buildQuickActionsSection(context),
          ],
        ),
      ),
    );
  }

  Widget _buildContactSection(BuildContext context) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.support_agent, color: Theme.of(context).primaryColor, size: 24),
                const SizedBox(width: 8),
                const Text(
                  'Li√™n H·ªá H·ªó Tr·ª£',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue[50],
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.blue[200]!),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'üìß Email H·ªó Tr·ª£',
                    style: TextStyle(fontWeight: FontWeight.w600, fontSize: 14),
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          'hungbuit@gmail.com',
                          style: TextStyle(
                            fontSize: 16,
                            color: Colors.blue[700],
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                      IconButton(
                        onPressed: () => _copyToClipboard(context, 'hungbuit@gmail.com'),
                        icon: const Icon(Icons.copy, size: 20),
                        tooltip: 'Sao ch√©p email',
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    'Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù',
                    style: TextStyle(fontSize: 12, color: Colors.grey),
                  ),
                ],
              ),
            ),
            
            const SizedBox(height: 16),
            
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: () => _sendEmail(context),
                icon: const Icon(Icons.email, size: 20),
                label: const Text('G·ª≠i Email Ngay'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Theme.of(context).primaryColor,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 12),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFAQSection(BuildContext context) {
    final faqs = [
      {
        'question': 'L√†m th·∫ø n√†o ƒë·ªÉ t·∫°o t√†i kho·∫£n?',
        'answer': 'B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Google. Ch·ªâ c·∫ßn nh·∫•n "ƒêƒÉng nh·∫≠p v·ªõi Google" tr√™n m√†n h√¨nh ch√≠nh v√† cho ph√©p ·ª©ng d·ª•ng truy c·∫≠p th√¥ng tin c∆° b·∫£n.'
      },
      {
        'question': 'L√†m th·∫ø n√†o ƒë·ªÉ thay ƒë·ªïi m·ª•c ti√™u h·ªçc t·∫≠p h√†ng ng√†y?',
        'answer': 'V√†o Profile ‚Üí C√†i ƒë·∫∑t Th√¥ng b√°o ‚Üí ƒëi·ªÅu ch·ªânh "M·ª•c ti√™u h√†ng ng√†y". B·∫°n c√≥ th·ªÉ ch·ªçn t·ª´ 5-50 t·ª´ m·ªói ng√†y t√πy theo kh·∫£ nƒÉng.'
      },
      {
        'question': 'T·∫°i sao t√¥i kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o?',
        'answer': 'Ki·ªÉm tra:\n‚Ä¢ C√†i ƒë·∫∑t th√¥ng b√°o trong app ƒë√£ b·∫≠t ch∆∞a\n‚Ä¢ Quy·ªÅn th√¥ng b√°o c·ªßa app trong Settings ƒëi·ªán tho·∫°i\n‚Ä¢ Do Not Disturb mode c√≥ ƒëang b·∫≠t kh√¥ng\n‚Ä¢ Th·ªùi gian th√¥ng b√°o c√≥ ph√π h·ª£p kh√¥ng'
      },
      {
        'question': 'L√†m th·∫ø n√†o ƒë·ªÉ √¥n t·∫≠p t·ª´ ƒë√£ h·ªçc?',
        'answer': 'C√≥ nhi·ªÅu c√°ch:\n‚Ä¢ V√†o tab "Quiz" ƒë·ªÉ l√†m b√†i ki·ªÉm tra\n‚Ä¢ S·ª≠ d·ª•ng t√≠nh nƒÉng "Targeted Review" cho t·ª´ kh√≥\n‚Ä¢ Xem "Difficult Words" trong Profile\n‚Ä¢ Th√¥ng b√°o t·ª± ƒë·ªông s·∫Ω nh·∫Øc b·∫°n √¥n t·∫≠p'
      },
      {
        'question': 'Streak (chu·ªói ng√†y h·ªçc) ƒë∆∞·ª£c t√≠nh nh∆∞ th·∫ø n√†o?',
        'answer': 'Streak tƒÉng khi b·∫°n h·ªçc √≠t nh·∫•t 1 t·ª´ m·ªói ng√†y. N·∫øu b·ªè l·ª° 1 ng√†y, streak s·∫Ω reset v·ªÅ 0. Tips: h·ªçc 2-3 t·ª´ m·ªói s√°ng ƒë·ªÉ duy tr√¨ streak d·ªÖ d√†ng!'
      },
      {
        'question': 'D·ªØ li·ªáu h·ªçc t·∫≠p c√≥ ƒë∆∞·ª£c ƒë·ªìng b·ªô kh√¥ng?',
        'answer': 'Hi·ªán t·∫°i d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u c·ª•c b·ªô tr√™n thi·∫øt b·ªã. Ch√∫ng t√¥i ƒëang ph√°t tri·ªÉn t√≠nh nƒÉng ƒë·ªìng b·ªô cloud ƒë·ªÉ b·∫°n c√≥ th·ªÉ truy c·∫≠p t·ª´ nhi·ªÅu thi·∫øt b·ªã.'
      },
      {
        'question': 'App c√≥ ho·∫°t ƒë·ªông offline kh√¥ng?',
        'answer': 'C√≥! T·∫•t c·∫£ t·ª´ v·ª±ng v√† b√†i h·ªçc ƒë·ªÅu c√≥ th·ªÉ s·ª≠ d·ª•ng offline. Ch·ªâ c·∫ßn internet khi ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu v√† c·∫≠p nh·∫≠t n·ªôi dung m·ªõi.'
      },
      {
        'question': 'L√†m th·∫ø n√†o ƒë·ªÉ b√°o c√°o l·ªói ho·∫∑c ƒë·ªÅ xu·∫•t t√≠nh nƒÉng?',
        'answer': 'G·ª≠i email cho ch√∫ng t√¥i t·∫°i hungbuit@gmail.com v·ªõi:\n‚Ä¢ M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ\n‚Ä¢ Screenshots n·∫øu c√≥\n‚Ä¢ Model ƒëi·ªán tho·∫°i v√† phi√™n b·∫£n app\n‚Ä¢ C√°c b∆∞·ªõc t√°i hi·ªán l·ªói'
      },
    ];

    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.quiz, color: Theme.of(context).primaryColor, size: 24),
                const SizedBox(width: 8),
                const Text(
                  'C√¢u H·ªèi Th∆∞·ªùng G·∫∑p',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            ...faqs.map((faq) => _buildFAQItem(
              context,
              faq['question']!,
              faq['answer']!,
            )).toList(),
          ],
        ),
      ),
    );
  }

  Widget _buildFAQItem(BuildContext context, String question, String answer) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey[300]!),
        borderRadius: BorderRadius.circular(8),
      ),
      child: ExpansionTile(
        title: Text(
          question,
          style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w500),
        ),
        children: [
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
            child: Text(
              answer,
              style: TextStyle(
                fontSize: 13,
                color: Colors.grey[700],
                height: 1.4,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAppInfoSection(BuildContext context) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.info, color: Theme.of(context).primaryColor, size: 24),
                const SizedBox(width: 8),
                const Text(
                  'Th√¥ng Tin App',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            _buildInfoRow('üì± Phi√™n b·∫£n', '1.0.0'),
            _buildInfoRow('üè¢ Nh√† ph√°t tri·ªÉn', 'ƒê√¥ng S∆°n Software'),
            _buildInfoRow('üìÖ C·∫≠p nh·∫≠t l·∫ßn cu·ªëi', 'September 2025'),
            _buildInfoRow('‚≠ê Rating', '4.8/5 (Coming soon)'),
            _buildInfoRow('üìä T·ªïng t·ª´ v·ª±ng', '2,000+ t·ª´ v·ª±ng'),
            _buildInfoRow('üéØ Ch·ªß ƒë·ªÅ', '15+ ch·ªß ƒë·ªÅ'),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Expanded(
            flex: 2,
            child: Text(
              label,
              style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w500),
            ),
          ),
          Expanded(
            flex: 3,
            child: Text(
              value,
              style: TextStyle(fontSize: 14, color: Colors.grey[700]),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildQuickActionsSection(BuildContext context) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.flash_on, color: Theme.of(context).primaryColor, size: 24),
                const SizedBox(width: 8),
                const Text(
                  'H√†nh ƒê·ªông Nhanh',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            Row(
              children: [
                Expanded(
                  child: _buildQuickActionButton(
                    context,
                    icon: Icons.refresh,
                    label: 'Reset Progress',
                    color: Colors.orange,
                    onTap: () => _showResetDialog(context),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: _buildQuickActionButton(
                    context,
                    icon: Icons.share,
                    label: 'Chia s·∫ª App',
                    color: Colors.green,
                    onTap: () => _shareApp(context),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            Row(
              children: [
                Expanded(
                  child: _buildQuickActionButton(
                    context,
                    icon: Icons.bug_report,
                    label: 'B√°o l·ªói',
                    color: Colors.red,
                    onTap: () => _reportBug(context),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: _buildQuickActionButton(
                    context,
                    icon: Icons.lightbulb,
                    label: 'ƒê·ªÅ xu·∫•t',
                    color: Colors.blue,
                    onTap: () => _sendSuggestion(context),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            // Debug Tool  
            Container(
              width: double.infinity,
              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
              decoration: BoxDecoration(
                color: Colors.purple.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.purple.withOpacity(0.3)),
              ),
              child: InkWell(
                onTap: () => Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const NotificationDebugScreen(),
                  ),
                ),
                borderRadius: BorderRadius.circular(8),
                child: Row(
                  children: [
                    Icon(Icons.build, color: Colors.purple, size: 24),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'üîß Debug Notifications',
                            style: TextStyle(
                              fontSize: 14,
                              fontWeight: FontWeight.bold,
                              color: Colors.purple,
                            ),
                          ),
                          const SizedBox(height: 2),
                          Text(
                            'S·ª≠a l·ªói th√¥ng b√°o v√† ki·ªÉm tra h·ªá th·ªëng',
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.purple[700],
                            ),
                          ),
                        ],
                      ),
                    ),
                    Icon(Icons.arrow_forward_ios, color: Colors.purple, size: 16),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildQuickActionButton(
    BuildContext context, {
    required IconData icon,
    required String label,
    required Color color,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(8),
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
        decoration: BoxDecoration(
          color: color.withOpacity(0.1),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: color.withOpacity(0.3)),
        ),
        child: Column(
          children: [
            Icon(icon, color: color, size: 24),
            const SizedBox(height: 4),
            Text(
              label,
              style: TextStyle(
                fontSize: 12,
                fontWeight: FontWeight.w500,
                color: color,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  void _copyToClipboard(BuildContext context, String text) {
    Clipboard.setData(ClipboardData(text: text));
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('üìã ƒê√£ sao ch√©p email v√†o clipboard'),
        duration: Duration(seconds: 2),
      ),
    );
  }

  void _sendEmail(BuildContext context) async {
    // Copy email to clipboard and show instructions
    _copyToClipboard(context, 'hungbuit@gmail.com');
    
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('üìß G·ª≠i Email H·ªó Tr·ª£'),
          content: const Text(
            'Email ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard!\n\n'
            'Vui l√≤ng m·ªü ·ª©ng d·ª•ng email v√†:\n'
            '1. D√°n ƒë·ªãa ch·ªâ: hungbuit@gmail.com\n'
            '2. Ti√™u ƒë·ªÅ: ƒê√¥ng S∆°n GO App Support Request\n'
            '3. M√¥ t·∫£ v·∫•n ƒë·ªÅ c·ªßa b·∫°n\n'
            '4. Th√™m th√¥ng tin thi·∫øt b·ªã n·∫øu c·∫ßn\n\n'
            'Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong 24 gi·ªù!',
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('ƒê√£ hi·ªÉu'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.pop(context);
                _copyToClipboard(context, 'hungbuit@gmail.com');
              },
              child: const Text('Sao ch√©p l·∫°i'),
            ),
          ],
        );
      },
    );
  }

  void _showResetDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('‚ö†Ô∏è Reset Progress'),
          content: const Text(
            'B·∫°n c√≥ ch·∫Øc mu·ªën reset to√†n b·ªô ti·∫øn tr√¨nh h·ªçc t·∫≠p?\n\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c v√† s·∫Ω x√≥a:\n‚Ä¢ T·∫•t c·∫£ t·ª´ ƒë√£ h·ªçc\n‚Ä¢ Streak hi·ªán t·∫°i\n‚Ä¢ Quiz history\n‚Ä¢ Achievement',
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('H·ªßy'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.pop(context);
                // TODO: Implement reset functionality
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('T√≠nh nƒÉng reset s·∫Ω c√≥ trong phi√™n b·∫£n ti·∫øp theo'),
                  ),
                );
              },
              style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
              child: const Text('Reset', style: TextStyle(color: Colors.white)),
            ),
          ],
        );
      },
    );
  }

  void _shareApp(BuildContext context) {
    // TODO: Implement share functionality
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('üîó T√≠nh nƒÉng chia s·∫ª s·∫Ω c√≥ trong phi√™n b·∫£n ti·∫øp theo'),
      ),
    );
  }

  void _reportBug(BuildContext context) {
    _sendEmail(context); // Reuse email functionality
  }

  void _sendSuggestion(BuildContext context) {
    _sendEmail(context); // Reuse email functionality
  }
}
